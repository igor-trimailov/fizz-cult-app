{"version":3,"sources":["assets/sounds/beep.wav","serviceWorker.js","middleware/index.js","actions/index.js","reducers/index.js","store/index.js","components/Exercise.jsx","components/Landing.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","store","next","action","res","console","warn","type","ActionTypes","combineReducers","appState","state","exerciseList","persistConfig","key","whitelist","storage","persistedReducer","persistReducer","rootReducer","Exercise","props","useState","seconds","setSeconds","play","setPlay","pictureAlt","picturePath","history","useHistory","beeper","Audio","beepSound","beep","beepCount","log","addEventListener","handler","removeEventListener","muted","useEffect","interval","setInterval","clearInterval","className","onClick","push","src","process","alt","value","minValue","maxValue","text","Landing","initialState","middlewares","middleware","thunkMiddleware","middlewareEnhancer","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","persistor","persistStore","configureStore","ReactDOM","render","loading","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f325bfc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.9f760093.wav\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default store => next => action => {\n  const res = next(action)\n  // const state = store.getState\n  // const dispatch = store.dispatch\n\n  console.warn('HERE')\n\n  switch (action.type) {\n    default:\n      console.warn('Unrecognized action: ' + action.type)\n  }\n\n  return res\n}","export const ActionTypes = {\n  REQUEST_EXERCISES: 'REQUEST_EXERCISES',\n}\n\nexport function requestExercises() {\n  return {\n    type: ActionTypes.REQUEST_EXERCISES,\n  }\n}\n","import { combineReducers } from 'redux'\nimport { ActionTypes } from '../actions'\n\nfunction appState(state = {}, action) {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n\nfunction exerciseList(state = [], action) {\n  switch (action.type) {\n    case ActionTypes.REQUEST_EXERCISES:\n      return state\n\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({ appState, exerciseList })\n","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\n// import loggerMiddleware from '../middleware/logger'\nimport middleware from '../middleware'\nimport rootReducer from '../reducers'\n\n// define what keys should be persisted using whitelist to not persist\n// store keys that are not that useful\nconst persistConfig = {\n  key: 'root',\n  whitelist: ['exerciseList'],\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore(initialState = {}) {\n  const middlewares = [middleware, thunkMiddleware]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const composedEnhancers = composeWithDevTools(middlewareEnhancer)\n\n  const store = createStore(persistedReducer, initialState, composedEnhancers)\n  const persistor = persistStore(store)\n\n  return { store, persistor }\n}\n","import React, { useState, useEffect } from 'react'\nimport beepSound from '../assets/sounds/beep.wav'\nimport { CircularProgressbar } from 'react-circular-progressbar'\nimport 'react-circular-progressbar/dist/styles.css'\nimport { useHistory } from 'react-router-dom'\n\nexport default function Exercise(props) {\n  const [seconds, setSeconds] = useState(10)\n  const [play, setPlay] = useState(true)\n  const { picturePath, pictureAlt } = props\n  const history = useHistory()\n\n  const beeper = new Audio(beepSound)\n  beeper.muted = false\n  // const picturePath = ''\n\n  // play and add an event listener for \"finished\", if no more plays, remove event listener\n  function beep(beepCount) {\n    \n\n    console.log(beepCount)\n\n    const handler = () => {\n      beeper.removeEventListener('ended', handler)\n\n      if (beepCount) {\n        beep(beepCount - 1)\n        console.log('double beep')\n      }\n    }\n\n    beeper.addEventListener('ended', handler)\n    beeper.play()\n  }\n\n  useEffect(() => {\n    if (!seconds) {\n      beep(1)\n      return\n    }\n\n    if (seconds < 6) {\n      beep()\n    }\n\n    const interval = setInterval(() => {\n      if(play) {\n      setSeconds(seconds - 1)\n      } else {\n      // what to do here?\n      }\n    }, 1000)\n\n    // clear interval on re-render\n    return () => clearInterval(interval)\n  }, [seconds, play])\n\n  const closeExercise = () => {\n    console.log('close')\n    history.push('/')\n  }\n\n  const pauseExercise = () => {\n    setPlay(!play)\n  }\n\n  return (\n    <div className=\"exercise\">\n      <div className=\"exercise__header\">\n        <span className=\"icon icon--close\" onClick={closeExercise}></span>\n      </div>\n      <div className=\"exercise__header-text\">Push ups</div>\n      <div className=\"exercise__image\">\n        <img\n          src={process.env.PUBLIC_URL + '/images/pushup-01.jpeg'}\n          alt={pictureAlt}\n        />\n      </div>\n      <div className=\"exercise__timer\">\n        <CircularProgressbar\n          value={seconds}\n          minValue=\"0\"\n          maxValue=\"30\"\n          text={seconds}\n        />\n      </div>\n      <div className=\"exercise__controls\">\n        <div className=\"control-panel\">\n          <span\n            className={'control-panel__pause'}\n            onClick={pauseExercise}\n          ></span>\n          <span className=\"control-panel__next\"></span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nfunction Landing() {\n  const history = useHistory()\n\n  function handleClick() {\n    history.push('/exercise')\n  }\n  return (\n    <div className=\"landing-page\">\n      <button onClick={handleClick}>start</button>\n    </div>\n  )\n}\n\nexport default Landing\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Exercise from './components/Exercise'\nimport Landing from './components/Landing'\n\nimport './scss/index.scss'\n\nconst { store, persistor } = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router>\n        <Switch>\n          <Route path=\"/exercise\">\n            <Exercise />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}