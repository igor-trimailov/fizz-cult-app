{"version":3,"sources":["serviceWorker.js","middleware/index.js","actions/api.js","actions/types.js","actions/creators.js","reducers/index.js","store/index.js","components/exercise/ExerciseControls.jsx","components/common/Header.jsx","components/common/Footer.jsx","utils/index.js","components/ExerciseList.jsx","components/RoutineList.jsx","configuration/index.js","constants/index.js","containers/Exercise.jsx","components/exercise/Exercise.jsx","containers/ExerciseList.jsx","containers/RoutineList.jsx","index.js"],"names":["Boolean","window","location","hostname","match","store","next","action","res","type","requestExerciseList","dispatch","a","requestExercises","fetch","process","then","json","data","console","log","receiveExercisesSuccess","catch","e","warn","receiveExercisesError","ActionTypes","REQUEST_EXERCISES","RECEIVE_EXERCISES_SUCCESS","RECEIVE_EXERCISES_ERROR","START_EXERCISE","STOP_EXERCISE","payload","error","startExercise","exercise","defaultExerciseState","previous","current","combineReducers","state","exerciseList","persistConfig","key","whitelist","storage","persistedReducer","persistReducer","rootReducer","React","memo","props","play","playCallback","nextCallback","previousCallback","disabled","controlsClassName","classNames","playClassName","className","onClick","title","onCloseCallback","Footer","children","playSound","sound","callback","numTimes","audio","AudioManager","src","handler","removeEventListener","addEventListener","ExerciseList","actions","routineId","params","id","history","useHistory","useEffect","firstExercise","goBack","map","name","push","RoutineList","breakExercise","image","image_alt","duration","getNextExercise","config","previousExerciseIndex","findIndex","item","connect","previousExercise","nextExercise","bindActionCreators","ExerciseListActions","useState","seconds","setSeconds","setPlay","soundPlaying","setSoundPlaying","useCallback","closeCallback","interval","setInterval","clearInterval","alt","value","minValue","maxValue","text","routineList","RoutineListActions","initialState","middlewares","middleware","thunkMiddleware","middlewareEnhancer","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","persistor","persistStore","configureStore","Audio","ReactDOM","render","loading","exact","path","component","Exercise","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"ohBAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDClBS,WAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACC,GACnC,IAAMC,EAAMF,EAAKC,GASjB,OALQA,EAAOE,KAKRD,K,iCCJIE,EAAsB,yDAAM,WAAOC,GAAP,SAAAC,EAAA,6DACvCD,EAASE,KAD8B,SAEjCC,MAAMC,oCACTC,MAAK,SAACR,GAAD,OAASA,EAAIS,UAClBD,MAAK,SAACE,GACLC,QAAQC,IAAI,cAAeF,GAC3BP,EAASU,EAAwBH,OAElCI,OAAM,SAACC,GACNJ,QAAQK,KAAK,mBAAoBD,GACjCZ,EAASc,EAAsB,4BAVI,2CAAN,uDCNtBC,EAAc,CACzBC,kBAAmB,oBACnBC,0BAA2B,4BAC3BC,wBAAyB,0BACzBC,eAAgB,iBAChBC,cAAe,iBCHV,SAASlB,IACd,MAAO,CACLJ,KAAMiB,EAAYC,mBAIf,SAASN,EAAwBH,GACtC,MAAO,CACLT,KAAMiB,EAAYE,0BAClBI,QAASd,GAIN,SAASO,EAAsBQ,GACpC,MAAO,CACLxB,KAAMiB,EAAYG,wBAClBG,QAASC,GAIN,SAASC,EAAcC,GAC5B,MAAO,CACL1B,KAAMiB,EAAYI,eAClBE,QAASG,GCrBb,IAAMC,EAAuB,CAAEC,SAAU,KAAMC,QAAS,MA0BzCC,gCAAgB,CAAEJ,SAzBjC,WAAyD,IAAvCK,EAAsC,uDAA9BJ,EAAsB7B,EAAQ,uCACtD,OAAQA,EAAOE,MACb,KAAKiB,EAAYI,eACf,OAAyB,OAAlBU,EAAMF,QAAN,eACEE,EADF,CACSF,QAAS/B,EAAOyB,UAC5B,CAAEK,SAAUG,EAAMF,QAASA,QAAS/B,EAAOyB,SAEjD,KAAKN,EAAYK,cACf,OAAOK,EAET,QACE,OAAOI,IAc8BC,aAV3C,WAA2C,IAArBD,EAAoB,uDAAZ,GAAIjC,EAAQ,uCACxC,OAAQA,EAAOE,MACb,KAAKiB,EAAYE,0BACf,OAAOrB,EAAOyB,QAAQS,aAExB,QACE,OAAOD,MCdPE,EAAgB,CACpBC,IAAK,OACLC,UAAW,CAAC,gBACZC,aAGIC,EAAmBC,YAAeL,EAAeM,G,kFCcxCC,UAAMC,MA7BrB,SAA0BC,GAAQ,IACxBC,EAAiED,EAAjEC,KAAMC,EAA2DF,EAA3DE,aAAcC,EAA6CH,EAA7CG,aAAcC,EAA+BJ,EAA/BI,iBAAkBC,EAAaL,EAAbK,SAEtDC,EAAoBC,IAAW,oBAAqB,CACxD,8BAA+BF,IAE3BG,EAAgBD,IAAW,CAC/B,2BAA4BN,EAC5B,2BAA4BA,IAS9B,OACE,yBAAKQ,UAAWH,GACd,0BACEG,UAAU,8BACVC,QAASN,IAEX,0BAAMK,UAAWD,EAAeE,QAZrB,WACTL,GAEJH,OAUE,0BAAMO,UAAU,0BAA0BC,QAASP,QCd1CL,UAAMC,MAXrB,SAAgBC,GAAQ,IACdW,EAA2BX,EAA3BW,MAAOC,EAAoBZ,EAApBY,gBAEf,OACE,yBAAKH,UAAU,UACb,yBAAKA,UAAU,gBAAgBE,GAC/B,0BAAMF,UAAU,2BAA2BC,QAASE,QCA3CC,MANf,SAAgBb,GAAQ,IACdc,EAAad,EAAbc,SAER,OAAO,yBAAKL,UAAU,UAAUK,ICLlC,SAASC,EAAUC,EAAOC,GAAyB,IAAfC,EAAc,uDAAH,EAC7C,GAAKF,EAAL,CAKA,IAAMG,EAAQrE,OAAOsE,aACrBD,EAAME,IAAMzD,wBAAsCoD,EAElD,IAAMM,EAAU,SAAVA,IACJH,EAAMI,oBAAoB,QAASD,GAGlB,KAFjBJ,GAAsB,GAGI,oBAAbD,GACTA,KAGFE,EAAMK,iBAAiB,QAASF,GAChCH,EAAMlB,SAIVkB,EAAMK,iBAAiB,QAASF,GAChCH,EAAMlB,YAtBJjC,QAAQK,KAAK,UAAY2C,EAAQ,kBC8CtBS,MA3Cf,SAAsBzB,GAAQ,IACpBV,EAA0BU,EAA1BV,aAAcoC,EAAY1B,EAAZ0B,QAEhBC,EAAY3B,EAAM/C,MAAM2E,OAAOC,GAC/BC,EAAUC,cAEhBC,qBAAU,WACRN,EAAQnE,oBAAoBoE,KAC3B,CAACD,EAASC,IAEb,IAAMM,EAAgB3C,EAAa,GAcnC,OACE,yBAAKmB,UAAU,iBACb,kBAAC,EAAD,CAAQE,MAAM,aAAaC,gBANR,WACrBkB,EAAQI,YAMN,yBAAKzB,UAAU,uBACZnB,EAAa6C,KAAI,SAACnD,GAAD,OAChB,yBAAKQ,IAAKR,EAAS6C,GAAIpB,UAAU,uBAC9BzB,EAASoD,UAIhB,kBAAC,EAAD,KACE,yBAAK3B,UAAU,uBAAuBC,QAvBtB,WACA5D,OAAOsE,aAEfnB,OACZyB,EAAQ3C,cAAckD,GACtBH,EAAQO,KAAKzE,8BAkBT,YCrBO0E,MAhBf,WACE,IAAMR,EAAUC,cAMhB,OACE,yBAAKtB,UAAU,gBACb,yBAAKA,UAAU,UAAUC,QANP,WACpBoB,EAAQO,KAAR,UAAgBzE,gBAAhB,iBAKE,gBCVS,GACb2E,cAAe,CACbV,IAAK,EACLO,KAAM,gBACNI,MAAO,YACPC,UAAW,gBACXzB,MAAO,YACP0B,SAAU,EACVpF,KCT0B,mBCQ9B,SAASqF,EAAgB3D,EAAUM,GACjC,GDT4B,mBCSxBN,EAASG,QAAQ7B,KACnB,OAAOsF,EAAOL,cAGhB,IAAMM,EAAwBvD,EAAawD,WACzC,SAACC,GAAD,OAAUA,EAAKlB,KAAO7C,EAASE,SAAS2C,MAG1C,OAAOvC,EAAauD,EAAwB,GAG9C,IAiBeG,eAjBS,SAAC3D,GAAW,IAC1BL,EAA2BK,EAA3BL,SAAUM,EAAiBD,EAAjBC,aAElB,MAAO,CACLsD,SACA5D,SAAUA,EAASG,QACnB8D,iBAAkBjE,EAASE,SAC3BgE,aAAcP,EAAgB3D,EAAUM,OAIjB,SAAC9B,GAC1B,MAAO,CACLkE,QAASyB,6BAAmBC,EAAqB5F,MAItCwF,EC7BA,SAAkBhD,GAAQ,IAAD,EACRqD,mBAASrD,EAAMhB,SAAS0D,UADhB,mBAC/BY,EAD+B,KACtBC,EADsB,OAEdF,oBAAS,GAFK,mBAE/BpD,EAF+B,KAEzBuD,EAFyB,OAGEH,oBAAS,GAHX,mBAG/BI,EAH+B,KAGjBC,EAHiB,KAK9B1E,EAAoCgB,EAApChB,SAAUkE,EAA0BlD,EAA1BkD,aAAcxB,EAAY1B,EAAZ0B,QAC1BI,EAAUC,cAEVhD,EAAgB4E,uBACpB,SAAC3E,GACCwE,GAAQ,GACRD,EAAWvE,EAAS0D,UACpBhB,EAAQ3C,cAAcC,KAExB,CAAC0C,IAGGvB,EAAewD,uBAAY,WAC/B5E,EAAcmE,KACb,CAACnE,EAAemE,IAEb9C,EAAmBuD,uBAAY,WACnC5E,EAAcC,KACb,CAACD,EAAeC,IAEbkB,EAAeyD,uBAAY,WAC/BH,GAASvD,KACR,CAACA,IAEE2D,EAAgBD,uBAAY,WAChC7B,EAAQO,KAAR,UAAgBzE,gBAAhB,QACC,CAACkE,IA6BJ,OA3BAE,qBAAU,WACJsB,IAAYtE,EAAS0D,UAAazC,IACpCyD,GAAgB,GAChB3C,EAAU/B,EAASgC,OAAO,WACxBwC,GAAQ,GACRE,GAAgB,OAIJ,IAAZJ,GAAiBrD,GACnBc,EAAU,WAAYZ,EAAc,GAGlCmD,EAAU,GAAiB,IAAZA,GACjBvC,EAAU,YAGZ,IAAM8C,EAAWC,aAAY,WACvB7D,GACFsD,EAAWD,EAAU,KAEtB,KAGH,OAAO,kBAAMS,cAAcF,MAC1B,CAAC7E,EAAUmB,EAAcmD,EAASrD,IAGnC,yBAAKQ,UAAU,YACb,kBAAC,EAAD,CAAQE,MAAO3B,EAASoD,KAAMxB,gBAAiBgD,IAE/C,yBAAKnD,UAAU,kBACb,yBAAKA,UAAU,mBACb,yBACEY,IAAKzD,wBAAsCoB,EAASwD,MACpDwB,IAAKhF,EAASyD,aAGlB,yBAAKhC,UAAU,mBACb,kBAAC,IAAD,CACEwD,MAAOX,EACPY,SAAS,IACTC,SAAUnF,EAAS0D,SACnB0B,KAAMd,MAIZ,kBAAC,EAAD,KACE,kBAAC,EACK,CACFrD,OACAC,eACAC,eACAC,mBACAC,SAAUoD,SC9EPT,eAZS,SAAC3D,GACvB,MAAO,CACLC,aAAcD,EAAMC,iBAIG,SAAC9B,GAC1B,MAAO,CACLkE,QAASyB,6BAAmBC,EAAqB5F,MAItCwF,CAA6CvB,GCA7CuB,eAZS,SAAC3D,GACvB,MAAO,CACLC,aAAcD,EAAMgF,gBAIG,SAAC7G,GAC1B,MAAO,CACLkE,QAASyB,6BAAmBmB,EAAoB9G,MAIrCwF,CAA6CV,G,EZE7C,WAA4C,IAApBiC,EAAmB,uDAAJ,GAC9CC,EAAc,CAACC,EAAYC,KAC3BC,EAAqBC,kBAAe,WAAf,EAAmBJ,GAExCK,EAAoBC,8BAAoBH,GAExCzH,EAAQ6H,sBAAYpF,EAAkB4E,EAAcM,GACpDG,EAAYC,YAAa/H,GAE/B,MAAO,CAAEA,QAAO8H,aalBWE,GAArBhI,E,EAAAA,MAAO8H,E,EAAAA,UAEflI,OAAOsE,aAAe,IAAI+D,MAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUnI,MAAOA,GACf,kBAAC,IAAD,CAAaoI,QAAS,KAAMN,UAAWA,GACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEO,OAAK,EACLC,KAAM5H,4BACN6H,UAAWhE,IAEb,kBAAC,IAAD,CACE8D,OAAK,EACLC,KAAM5H,6BACN6H,UAAWC,IAEb,kBAAC,IAAD,CACEH,OAAK,EACLC,KAAM5H,iBACN6H,UAAWnD,QAMrBqD,SAASC,eAAe,SnB4FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlI,MAAK,SAAAmI,GACJA,EAAaC,gBAEd9H,OAAM,SAAAW,GACLd,QAAQc,MAAMA,EAAMoH,c","file":"static/js/main.1aa7f50b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default (store) => (next) => (action) => {\n  const res = next(action)\n  // const state = store.getState\n  // const dispatch = store.dispatch\n\n  switch (action.type) {\n    default:\n    // console.warn('Unrecognized action: ' + action.type)\n  }\n\n  return res\n}\n","import {\n  requestExercises,\n  receiveExercisesSuccess,\n  receiveExercisesError,\n} from './index'\n\nexport const requestExerciseList = () => async (dispatch) => {\n  dispatch(requestExercises())\n  await fetch(process.env.PUBLIC_URL + '/exercise_list.json')\n    .then((res) => res.json())\n    .then((data) => {\n      console.log('fetced data', data)\n      dispatch(receiveExercisesSuccess(data))\n    })\n    .catch((e) => {\n      console.warn('data fetch error', e)\n      dispatch(receiveExercisesError('Could not fetch data'))\n    })\n}\n","export const ActionTypes = {\n  REQUEST_EXERCISES: 'REQUEST_EXERCISES',\n  RECEIVE_EXERCISES_SUCCESS: 'RECEIVE_EXERCISES_SUCCESS',\n  RECEIVE_EXERCISES_ERROR: 'RECEIVE_EXERCISES_ERROR',\n  START_EXERCISE: 'START_EXERCISE',\n  STOP_EXERCISE: 'STOP_EXERCISE',\n}\n","import { ActionTypes } from './types'\n\nexport function requestExercises() {\n  return {\n    type: ActionTypes.REQUEST_EXERCISES,\n  }\n}\n\nexport function receiveExercisesSuccess(data) {\n  return {\n    type: ActionTypes.RECEIVE_EXERCISES_SUCCESS,\n    payload: data,\n  }\n}\n\nexport function receiveExercisesError(error) {\n  return {\n    type: ActionTypes.RECEIVE_EXERCISES_ERROR,\n    payload: error,\n  }\n}\n\nexport function startExercise(exercise) {\n  return {\n    type: ActionTypes.START_EXERCISE,\n    payload: exercise\n  }\n}","import { combineReducers } from 'redux'\nimport { ActionTypes } from '../actions'\n\n// keep track of previous exercise\nconst defaultExerciseState = { previous: null, current: null }\nfunction exercise(state = defaultExerciseState, action) {\n  switch (action.type) {\n    case ActionTypes.START_EXERCISE:\n      return state.current === null\n        ? { ...state, current: action.payload }\n        : { previous: state.current, current: action.payload }\n\n    case ActionTypes.STOP_EXERCISE:\n      return defaultExerciseState\n\n    default:\n      return state\n  }\n}\n\nfunction exerciseList(state = [], action) {\n  switch (action.type) {\n    case ActionTypes.RECEIVE_EXERCISES_SUCCESS:\n      return action.payload.exerciseList\n\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({ exercise, exerciseList })\n","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\n// import loggerMiddleware from '../middleware/logger'\nimport middleware from '../middleware'\nimport rootReducer from '../reducers'\n\n// define what keys should be persisted using whitelist to not persist\n// store keys that are not that useful\nconst persistConfig = {\n  key: 'root',\n  whitelist: ['exerciseList'],\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore(initialState = {}) {\n  const middlewares = [middleware, thunkMiddleware]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const composedEnhancers = composeWithDevTools(middlewareEnhancer)\n\n  const store = createStore(persistedReducer, initialState, composedEnhancers)\n  const persistor = persistStore(store)\n\n  return { store, persistor }\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction ExerciseControls(props) {\n  const { play, playCallback, nextCallback, previousCallback, disabled } = props\n\n  const controlsClassName = classNames('exercise-controls', {\n    'exercise-controls--disabled': disabled,\n  })\n  const playClassName = classNames({\n    'exercise-controls__play': !play,\n    'exercise-controls__pause': play,\n  })\n\n  const onPlay = () => {\n    if (disabled) return\n\n    playCallback()\n  }\n\n  return (\n    <div className={controlsClassName}>\n      <span\n        className=\"exercise-controls__previous\"\n        onClick={previousCallback}\n      ></span>\n      <span className={playClassName} onClick={onPlay}></span>\n      <span className=\"exercise-controls__next\" onClick={nextCallback}></span>\n    </div>\n  )\n}\n\nexport default React.memo(ExerciseControls)\n","import React from 'react'\n\nfunction Header(props) {\n  const { title, onCloseCallback } = props\n\n  return (\n    <div className=\"header\">\n      <div className=\"header__text\">{title}</div>\n      <span className=\"header__icon icon--close\" onClick={onCloseCallback}></span>\n    </div>\n  )\n}\n\nexport default React.memo(Header)\n","import React from 'react'\n\nfunction Footer(props) {\n  const { children } = props\n\n  return <div className=\"footer\">{children}</div>\n}\n\nexport default Footer\n","function playSound(sound, callback, numTimes = 1) {\n  if (!sound) {\n    console.warn('Sound: ' + sound + ' was not found')\n    return\n  }\n\n  const audio = window.AudioManager\n  audio.src = process.env.PUBLIC_URL + '/sounds/' + sound\n\n  const handler = () => {\n    audio.removeEventListener('ended', handler)\n    numTimes = numTimes - 1\n\n    if (numTimes === 0) {\n      if (typeof callback === 'function') {\n        callback()\n      }\n    } else {\n      audio.addEventListener('ended', handler)\n      audio.play()\n    }\n  }\n\n  audio.addEventListener('ended', handler)\n  audio.play()\n}\n\nexport { playSound }\n","import React, { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { Header, Footer } from './common'\n\nfunction ExerciseList(props) {\n  const { exerciseList, actions } = props\n\n  const routineId = props.match.params.id\n  const history = useHistory()\n\n  useEffect(() => {\n    actions.requestExerciseList(routineId)\n  }, [actions, routineId])\n\n  const firstExercise = exerciseList[0]\n\n  const startExercise = () => {\n    const audioEffect = window.AudioManager\n    // audioEffect.src = process.env.PUBLIC_URL + '/sounds/beep.wav'\n    audioEffect.play()\n    actions.startExercise(firstExercise)\n    history.push(process.env.PUBLIC_URL + '/exercise/1')\n  }\n\n  const goBackCallback = () => {\n    history.goBack()\n  }\n\n  return (\n    <div className=\"exercise-list\">\n      <Header title=\"RA routine\" onCloseCallback={goBackCallback} />\n      <div className=\"exercise-list__body\">\n        {exerciseList.map((exercise) => (\n          <div key={exercise.id} className=\"exercise-list__item\">\n            {exercise.name}\n          </div>\n        ))}\n      </div>\n      <Footer>\n        <div className=\"exercise-list__start\" onClick={startExercise}>\n          Start\n        </div>\n      </Footer>\n    </div>\n  )\n}\n\nexport default ExerciseList\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nfunction RoutineList() {\n  const history = useHistory()\n\n  const selectRoutine = () => {\n    history.push(`${process.env.PUBLIC_URL}/routine/1`)\n  }\n\n  return (\n    <div className=\"routine-list\">\n      <div className=\"routine\" onClick={selectRoutine}>\n        RA Routine\n      </div>\n    </div>\n  )\n}\n\nexport default RoutineList\n","import { BREAK_EXERCISE } from '../constants'\n\nexport default {\n  breakExercise: {\n    id: -1,\n    name: 'Take a Break!',\n    image: 'break.png',\n    image_alt: 'Take a Break!',\n    sound: 'break.mp3',\n    duration: 5,\n    type: BREAK_EXERCISE,\n  },\n}\n","export const BREAK_DURATION = 5\nexport const BREAK_EXERCISE = 'BREAK_EXERCISE'","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { Exercise } from '../components'\nimport config from '../configuration'\nimport { BREAK_EXERCISE } from '../constants'\nimport * as ExerciseListActions from '../actions'\n\n// get next exercise in line\nfunction getNextExercise(exercise, exerciseList) {\n  if (exercise.current.type !== BREAK_EXERCISE) {\n    return config.breakExercise\n  }\n\n  const previousExerciseIndex = exerciseList.findIndex(\n    (item) => item.id === exercise.previous.id\n  )\n\n  return exerciseList[previousExerciseIndex + 1]\n}\n\nconst mapStateToProps = (state) => {\n  const { exercise, exerciseList } = state\n\n  return {\n    config,\n    exercise: exercise.current,\n    previousExercise: exercise.previous,\n    nextExercise: getNextExercise(exercise, exerciseList),\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: bindActionCreators(ExerciseListActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Exercise)\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { CircularProgressbar } from 'react-circular-progressbar'\nimport 'react-circular-progressbar/dist/styles.css'\nimport { useHistory } from 'react-router-dom'\nimport ExerciseControls from './ExerciseControls'\nimport { Header, Footer } from '../common'\n\nimport { playSound } from '../../utils'\n\nexport default function Exercise(props) {\n  const [seconds, setSeconds] = useState(props.exercise.duration)\n  const [play, setPlay] = useState(false)\n  const [soundPlaying, setSoundPlaying] = useState(false)\n\n  const { exercise, nextExercise, actions } = props\n  const history = useHistory()\n\n  const startExercise = useCallback(\n    (exercise) => {\n      setPlay(false)\n      setSeconds(exercise.duration)\n      actions.startExercise(exercise)\n    },\n    [actions]\n  )\n\n  const nextCallback = useCallback(() => {\n    startExercise(nextExercise)\n  }, [startExercise, nextExercise])\n\n  const previousCallback = useCallback(() => {\n    startExercise(exercise)\n  }, [startExercise, exercise])\n\n  const playCallback = useCallback(() => {\n    setPlay(!play)\n  }, [play])\n\n  const closeCallback = useCallback(() => {\n    history.push(`${process.env.PUBLIC_URL}/`)\n  }, [history])\n\n  useEffect(() => {\n    if (seconds === exercise.duration && !play) {\n      setSoundPlaying(true)\n      playSound(exercise.sound, () => {\n        setPlay(true)\n        setSoundPlaying(false)\n      })\n    }\n\n    if (seconds === 0 && play) {\n      playSound('beep.wav', nextCallback, 2)\n    }\n\n    if (seconds < 5 && seconds !== 0) {\n      playSound('beep.wav')\n    }\n\n    const interval = setInterval(() => {\n      if (play) {\n        setSeconds(seconds - 1)\n      }\n    }, 1000)\n\n    // clear interval on re-render\n    return () => clearInterval(interval)\n  }, [exercise, nextCallback, seconds, play])\n\n  return (\n    <div className=\"exercise\">\n      <Header title={exercise.name} onCloseCallback={closeCallback} />\n\n      <div className=\"exercise__body\">\n        <div className=\"exercise__image\">\n          <img\n            src={process.env.PUBLIC_URL + '/images/' + exercise.image}\n            alt={exercise.image_alt}\n          />\n        </div>\n        <div className=\"exercise__timer\">\n          <CircularProgressbar\n            value={seconds}\n            minValue=\"0\"\n            maxValue={exercise.duration}\n            text={seconds}\n          />\n        </div>\n      </div>\n      <Footer>\n        <ExerciseControls\n          {...{\n            play,\n            playCallback,\n            nextCallback,\n            previousCallback,\n            disabled: soundPlaying,\n          }}\n        />\n      </Footer>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { ExerciseList } from '../components'\nimport * as ExerciseListActions from '../actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    exerciseList: state.exerciseList,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: bindActionCreators(ExerciseListActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExerciseList)\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { RoutineList } from '../components'\nimport * as RoutineListActions from '../actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    exerciseList: state.routineList,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: bindActionCreators(RoutineListActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoutineList)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport './scss/index.scss'\nimport { Exercise, ExerciseList, RoutineList } from './containers'\n\nconst { store, persistor } = configureStore()\n\nwindow.AudioManager = new Audio()\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + '/routine/:id'}\n            component={ExerciseList}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + '/exercise/:id'}\n            component={Exercise}\n          />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + '/'}\n            component={RoutineList}\n          />\n        </Switch>\n      </Router>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}